//Dev Pipeline Deploy to dev environment

pipeline {
    agent any
    
    environment {
        REPO_URL = 'https://github.com/Thanhlam43k4/Microservices_Nodejs.git'
        FE_IMAGE_ID = 'thanhlam2k4/microservice-fe'
        CUSTOMER_IMAGE_ID = 'thanhlam2k4/microservice-customer'
        SHOPPING_IMAGE_ID = 'thanhlam2k4/microservice-shopping'
        PRODUCT_IMAGE_ID = 'thanhlam2k4/microservice-product'
        DOCKER_NETWORK_NAME = 'micro-dev-net'
        MYSQL_SERVICE_DEV = 'mysql_server'
        JENKINS_DOCKERHUB_CREDENTIALS = 'dockerhub_id'
        PROJECT_DIRECTORY = 'Microservices_Nodejs'
        DEV_IP_ADDRESS = '192.168.56.105'
        STAGING_IP_ADDRESS = '192.168.56.110'
        STAGING_USER ='thanhlam'
        JENKINS_SSH_KEY = 'jenkins-ssh-key'
        STAGING_SUDO_PWD = credentials('staging_sudo_pwd')
        GITHUB_TOKENS = 'github-token'
    }



    stages {
        stage('Pulling source code') {
            steps {
                echo 'Pulling code from GitHub............'

                git branch: 'main', credentialsId: "${GITHUB_TOKENS}", url: REPO_URL

                echo 'Pulling successfully................'
            }
        }
        stage('Build Docker image and push to DockerHub') {
            steps {
                echo 'Build docker Image in file Dockerfile' //File Dockerfile in the dir of source code
                //Docker command
                echo 'Build Docker Image'

                sh 'docker build -t ${FE_IMAGE_ID} ./frontend'

                sh 'docker build -t ${CUSTOMER_IMAGE_ID} ./customer'
                // //You can run docker image anh check your images in your local machine

                sh 'docker build -t ${SHOPPING_IMAGE_ID} ./shopping'

                sh 'docker build -t ${PRODUCT_IMAGE_ID} ./product'

                sh 'docker images'
                withDockerRegistry(credentialsId: "${JENKINS_DOCKERHUB_CREDENTIALS}", url: 'https://index.docker.io/v1/') {

                    echo 'Push to Dockerhub Registry'
                    
                    sh 'docker push ${CUSTOMER_IMAGE_ID}'

                    sh 'docker push ${SHOPPING_IMAGE_ID}'

                    sh 'docker push ${PRODUCT_IMAGE_ID}'

                    sh 'docker push ${FE_IMAGE_ID}'
                    
                }
            }
        }
        stage('Prune docker data') {
            steps {
                echo 'Prune data in docker!!!'

                sh 'docker system prune -a --volumes -f'
            }
        }
        stage('Deploy to dev environment') {
            steps {
                echo 'Deploy to dev environment.....'
                // sh 'fuser -k 80/tcp'
                // sh 'docker stop $(docker ps -a)'
                // sh 'kill -9 $(lsof -i tcp:80)'
                sh 'docker network create ${DOCKER_NETWORK_NAME} || echo "this network exist"'

                sh 'docker compose up ${MYSQL_SERVICE_DEV} -d'

                sh 'docker compose up -d'

                sh 'docker ps'
            }
        }
        stage('Testing Dev development') {              //Need to update with Sonarqube 
            steps {
                //Test Product service
                sh 'sleep 10'

                echo 'Testing dev development...'

                sh 'curl ${DEV_IP_ADDRESS}'

                sh 'docker compose down'
            //
            }
        }
        stage('Deploy to Staging'){
            steps{
                    echo 'Deploy to Staging Environment'
                    script{
                         def deploying = "#!/bin/bash\n"+

                         "\necho ${STAGING_SUDO_PWD} | sudo -S  docker ps" + 

                         "\ngit clone ${REPO_URL}" +

                         "\necho ${STAGING_SUDO_PWD} | sudo docker network create ${DOCKER_NETWORK_NAME}" + 

                         "\ncd ${PROJECT_DIRECTORY} && echo ${STAGING_SUDO_PWD} | sudo docker compose up ${MYSQL_SERVICE_DEV} -d && sleep 10 &&  echo ${STAGING_SUDO_PWD} | sudo docker compose up -d" 

                        sshagent(['jenkins-ssh-key']) {
                         // some block
                            sh """
                                ssh -o StrictHostKeyChecking=no -i ${JENKINS_SSH_KEY} ${STAGING_USER}@${STAGING_IP_ADDRESS} "echo \\\"${deploying}\\\" > deploy.sh && chmod 777 deploy.sh && ./deploy.sh"
                               """
                        }
                    }
            }
        }


        stage('Testing Staging Environment')
        {
            steps{
                echo 'Testing Staging environment .....'

                sh 'sleep 5'

                sh 'curl ${STAGING_IP_ADDRESS}'


                sh 'sleep 5'
            }
        }
        // post {
        //     // Clean after build
        //     always {
        //         cleanWs()
        //     }
        // }
    }
}
